挂接NFS
1.服务器允许目录被挂接
2.开发板嘎结服务器文件系统


1) /etc/export 添加被挂接目录 /work/nfs_root/first_fs
/work/nfs_root *(rw,sync,no_root_squash)
/work/nfs_root/first_fs   *(rw,sync,no_root_squash)
2) 重启NFS服务
sudo /etc/init.d/nfs-kernel-server restart

测试一下，将文件系统挂载到/mnt目录下

book@book-desktop:~$ sudo mount -t nfs 192.168.10.175:/work/nfs_root/first_fs /mnt
mount.nfs: mount to NFS server '192.168.10.175:/work/nfs_root/first_fs' failed: RPC Error: Program not registered
book@book-desktop:~$ 

set bootargs noinitrd root=/dev/nfs nfsroot=192.168.68.20:/work/nfs_root/fs_mini ip=192.168.68.17:192.168.68.11:192.168.68.1:255.255.255.0::eth0:off init=/linuxrc console=ttySAC0

set bootargs noinitrd root=/dev/mtdblock3 rootfstype=yaffs console=ttySAC0 (root在mtdblock3)


tftp烧写命令
tftp 0x30000000 fs_mini.yaffs2  或者 nfs 0x30000000 192.168.68.20:目录
nand erase 
nand write.yaffs 0x30000000 root $(filesize)

定义指针 
volatile int *p；
定义地址
#define A (*((volatile usigned long *)0x40000000))
不停改变的变量
volatile int i;
for(i=0;i<10;i++)

函数指针
void (*theKernel)(int zero,int arch, unit params);
theKernel = (void (*)(int,int,uint))0x3000800;
theKernel();//mov pc,#0x3000800


rm -rf filename  删除文件夹
/*************************************/
最简单的bootloader
1.初始化硬件 关看门狗，设置时钟，设置 sdram,初始化nand flash
2.内核nandfalsh  到 sdram
3.设置传给内核的参数

date --date='1 days ago' "+%d"
makefile

smdk2410_config	:	unconfig
	@$(MKCONFIG) $(@:_config=) arm arm920t smdk2410 NULL s3c24x0//$(@:_config=) 忽略 smdk2410 的_config
	== ./mkconfig smdk arm arm arm920t smdk2410 NULL s3c24x0
	
	
	
	
	
	
	
	bash shell
	
	date --date='1 days ago' "+%d"  //时间指令 取指令的值 $(指令) +号在双引号内
	
	
	计算   a=$(($b*$c))  //两层括号
	declare -i a=20+50//申明a为整形变量
	
	
	username=${username-root}// 若username不存在，则username的内容为root//大括号，-号后是替换内容
	username=${username：-root}//:作用 若username="" 即空字符串，username也替换为root//
	变量设定方式      str没有设定    str为空    str为非空
	var=${str-expr}   var=expr       var=       var=$str
	var=${str:-expr}  var=expr		 var=expr   var=$str
	
	var=${str+expr}   var=       	 var=expr   var=expr
	var=${str:+expr}  var=		 	 var=       var=expr//+ - 正好相反
	
	var=${str=expr}   var=expr       var=       var=$str
					  str=expr		 str不变    str不变
	var=${str:=expr}  var=expr		 var=expr   var=$str
					  str=expr		 str=expr    str不变
					  
	var=${str?expr}   expr输出至stderr		 var=              var=$str			  
	var=${str:?expr}  expr输出至stderr		 expr输出至stderr  var=$str
	//:针对空字符串
	
	
	变量关键词替换删除  
	#  ## 
	%  %% 
	/ /     // /
	
	
	&&  ||
	cmd1&&cmd2   //cmd1执行正确后执行cmd2,cmd1执行错误，cmd2不执行
	cmd1||cmd2    //cmd1执行错误后执行cmd2,cmd1执行正确，cmd2不执行
	
	
	grep "\"Boot\Agent\"" * -nR
	grep -r 'str' filename  递归查找
	vi 跳到第n行  ：n
	
	patch -pn < 补丁路径  //n 是当前路径与补丁路径之差
	
	tar -cjf filename.tar.bz2 filename  //压缩
	tar -xjf filename.tar.bz2//解压 
	
	
	0X100|0X020
	
	|0X10|0X200000|0X400000|
	
	
	gd->env_valid  //?
	
	shift +f8 高亮选择变量
	
	/*****************************/
	/*20170519                   */
	s3c2410 看门狗 地址   0x53000000
	
	
	
	
	
	/************************/
	/*2017522               */
	int main(void)
	{
		void (*my_function)(void);
		my_function= 0x8000;
		my_function();
	}
	指向函数d指针  int (*a)(int);
	
	stm32启动过程
	1.上电硬件设置sp，pc
	2.设置系统时钟
	3.软件设置sp 
	4.加载.data.bss
	5.跳转到main
	
	位取反，异或
	与0异或不变，与1异或取反
	
	HTTP
	GET命令 向服务器索取数据
	浏览器 GET /路径/文件名 HTTP/1.0
	服务器 HTTP/1.1  200  ok
	
	
	POST     向服务器提交数据
	

uboot移植  在smdk2410上修改 可用于jz2440
1.修改makefile
全局变量声明 DECLARE_GLOBAL_DATA_PTR    //gd 结构体
2.1 board_init.c  
	设置 HCLK FCLK PCLK 
	执行 make jz2440_config     make all
	
3.1 NOR flash启动
	型号符合CFI接口  drivers/cfi_flash.c
	jz2440.h增加 #define CFG_FLASH_CFI_DRIVER
	去掉 board/jz2440/Makefile 中的 flash.o

	
4.1 支持NAND flash
	#define CONFIG_COMMANDS 增加 CFG_CMD_NAND
	增加一些宏 CFG_NAND_BASE 0  CFG_MAX_NAND_DEVICE 1 NAND_MAX_CHIP 1
	修改开发板相关函数 board_nand_init /
	根据2410 增加 S3C2440_NAND 的数据结构 S3C2440_GetBase_NAND函数
	仿照内核 drivers/mtd/nand/s3c2410.c 写 nand_flash.c（包含board_nand_init）修改makefile 增加nand_flash.o
5.增加支持yaffs文件系统映象	 用于使用Uboot烧写内核 文件系统映像文件
6.修改默认配置参数
6.1linux启动参数
#define CONFIG_SETUP_MEMORY_TAGS 1
#define CONFIG_CMDLINE_TAG 1
#define CONFIG_BOOTARGS    	"noinitrd root=/dev/mtdblock3 init=/linuxrc console=ttySAC0"
只有定义这些宏 uboot才能传入正确的启动参数 gd结构体
6.2 自启动命令
#define CONFIG_BOOTDELAY  3
#define CONFIG_BOOTCOMMAND	"nand read.jffs2 0x30007FC0 kernel; bootm 0x30007FC0"
	


1.内核启动流程，据此配置内核
1.1 修改 Makefile  arch  cross_compile
1.2 make s3c2410_defconfig //在2410上修改jz2440
1.3 make uImage
2.裁剪内核
make menuconfig
 vi .config 查看 配置  ，y：选中 m:模块（不必裁剪）
1.1 



构建根文件系统
 1.编译 Busybox  //韩语 linux常用命令 ls等
	make menuconfig   make CONFIG_PREFIX=dir_path install
2.安装 glibc库
3.1 构建 etc
inittab 
id：rstate：action：process
etc/inittab etc/init.d etc/fstab 
sbin/init 进程是内核启动后的第一个进程，
它根据 /etc/inittab 创建其他进程  inittab内会执行 rcS
rcS 一个脚本 他可以执行 shell 命令，在里面可以执行用户写的程序，使其开机执行
fstab 指定挂接的文件系统proc tmpfs//在rcS内 执行了 mount -a
3.1 构建 dev目录
构建 字符设备  console null ttySAC0 块设备 mtdblock0 1 3 

mdev 创建设备文件 busybox配置时候选择
作用 初始化目录，动态更新
自启动mdev  在rcS内写shell命令 在fstab 指定tmpfs挂接 /dev sysfs 挂接 /sys


/**********************20170527*******/
/*LED驱动*/
1.驱动程序不能直接操作物理地址
需要ioremaap 映射为虚拟地址
入口程序 init
    gpfcon = (volatile unsigned long *)ioremap(0x56000050, 16);
	gpfdat = gpfcon + 1;
	
出口程序 exit
iounmap(gpfcon);





/****************驱动结构体20170528*********************/
C语言标记化结构初始化语法
以前在看Linux代码时，就对它的结构体初始化写法感到奇怪，所有的初始化代码都写清了变量名，并且变量名前面还有一
个诡异的点。最近学习Linux设备驱动，又遇到了，就查了一下，发现自己的知识果然纰漏不少，此种初始化写法并不是什
么特殊的代码风格，而是所谓的C语言标记化结构初始化语法（designated initializer），而且还是一个ISO标准。在此
我就小小科普一下。

代码举例如下：

#include<stdio.h>  #include<stdlib.h>  struct operators  {       void(*read1)(char*);       
void(*read2)(char*);       void(*read3)(char*);       int n;  };    void read1(char*data)  
{       printf("read1: %s/n",data);  }  void read2(char*data)  {       printf("read2: %s/n",data);  }  
void read3(char*data)  {       printf("read3: %s/n",data);  }    int main()  {
    //传统的初始化方法       //struct operators my_op = {read1, read2, read3, 100};
    //所谓的标记化结构初始化语法       struct operators my_op ={.read2 = read2,                                 .read1 = read1,                                 .read3 = read3,                                 .n =100};       my_op.read1("wangyang");       my_op.read2("wangyang");       my_op.read3("wangyang");       return0;  }
重点就在于main()函数中对my_op结构体的初始化语句，使用点加变量名进行初始化。用过python的人会马上感觉到这与
关键字传参是多么的相似。

那它的好处在哪里呢？我想好处有三。首先，标记传参不用理会参数传递的顺序，正如我上面的例子表示的那样，我是
先初始化了read2，然后再初始化了read1，程序员不用记忆参数的顺序；再者，我们可以选择性传参，在传统C语言顺序
传参中，如果你只想对第三个变量进行初始化，那么你不得不给第一个，第二个参数进行初始化，而有时候一个变量并没
有很合适的默认值，而使用标记初始化法，你可以相当自由地对你有把握的参数进行初始化；还有，扩展性更好，如果你要在该结构体中增加一个字段，传统方式下，为了考虑代码修改量，你最好将新添加的字段放在这个结构体的最后面，否则你将要面对大量且无趣的修改，你可能觉得放在哪里没什么关系，但是我们都习惯了，姓名下面是性别，性别下面是年龄，接着是兴趣爱好，最后是事迹描述，如果年龄放在了最后面，难道不别扭么？！

有人提到，该种语法还有利于提高性能，木有感觉出来，我在这里就不谈这点了。

其实，该种初始化语法并不是什么新技术，新定义，它就是ISO C99的一个标准用法，也就是说99年就有了，再说Linus也
不会去赶什么时髦的，据说C Primer Plus第五版中提到了这点，不过，我没有看过该书，遗憾，我是直接投入了面向对象
的怀抱。

GCC有扩展标记化结构初始化语法，写法是下面这样的：

struct operators my_op = {read2 : read2, read1 : read1, read3 : read3,};




/*******************20170529********/
查看驱动 lsmod
安装驱动 insmod
卸载启动 rmmod
创建设备节点 mknod   /dev/xxx  c 252 0  //目录节点   类型  主设备号  次
内核与驱动用的交叉编译工具版本要一致





/********************20170530*************/
cp -r        拷贝文件夹
出现
scripts/Makefile.build:208: recipe for target '/work/system/drv_and_test/test/leds/myleds.o' failed
make[2]: *** [/work/system/drv_and_test/test/leds/myleds.o] Error 1
Makefile:1204: recipe for target '_module_/work/system/drv_and_test/test/leds' failed
make[1]: *** [_module_/work/system/drv_and_test/test/leds] Error 2
make[1]: Leaving directory '/work/system/linux-2.6.22.6'
Makefile:4: recipe for target 'all' failed
可能原因之一
/work/system/drv_and_test/test/leds/myleds.c:5:24: linux/gpio.h: No such file or directory
/work/system/drv_and_test/test/leds/myleds.c:17:27: mach/hardware.h: No such file or directory
/work/system/drv_and_test/test/leds/myleds.c:18:28: mach/regs-gpio.h: No such file or directory
/work/system/drv_and_test/test/leds/myleds.c:19:28: mach/leds-gpio.h: No such file or directory
包含不正确的头文件（不存在）


板子上的系统lib  要与交叉编译工具链的库 一致 这样编译出来的 程序才可以在板子上运行



/***********************20170531*********/
#define GPFCON  (*(volatile unsigned long *)(gpio_va + GPIO_OFT(0x56000050)))
#define GPFDAT  (*(volatile unsigned long *)(gpio_va + GPIO_OFT(0x56000054)))



volatile unsigned long *gpfcon = NULL;
volatile unsigned long *gpfdat = NULL;
gpfcon = (volatile unsigned long *)ioremap(0x56000050, 16);
gpfdat = gpfcon + 1; 

gpfcon 是指向4字节长度的指针
gpfcon+1   指针向后移位4字节

					清零  不变
0011111100000000  1100000011111111|

*gpfcon &= ~((0x3<<(4*2)) | (0x3<<(5*2)) | (0x3<<(6*2)));//清零对应位
*gpfcon |= ((0x1<<(4*2)) | (0x1<<(5*2)) | (0x1<<(6*2)));//01配置为输出

down(&leds_lock);
leds_status = 0x0;
up(&leds_lock); 13277775667

内核提供加锁机制，防止并发。
down() 获得锁，如果别人的程序已经事先获得了，本程序就会休眠
up() 释放锁，还会唤醒等待该锁的其他程序

/*************20170601*****************************/
poll机制  
在timeout 变为0 时 返回一个值，得知程序状态
在timeout 时间内 发生事件则执行，并重置 timeout值
ctrl+/ 查找
按键
cpu进入异常 b vetor_irq+__//irq_usr
irq_hander  asm_do_irq  irq_desc（指向初始化irq）
action->hander//用户写的中断

request_irq()
{/*分配irq_action
	放入irq_desc
	设置引脚为中断模式，使能
*/
}
			中断号    hander       flag//中断类型，边沿触发等   name    device_id//穿给hander参数
request_irq(IRQ_EINT0,buttons_irq,IRQT_BOTHEDGE,"S2",1)
//中断法  主要是两个函数 request_irq   hander   

.release=close；//释放中断 free_irq(IRQ_EINT0,1)

static irqreturn_ buttons_irq()

s3c2410_gpio_getpin(pin)
s3c2410_gpio_setpin(pin)

多个线程在等待同一件事件的发生时会进入睡眠状态，等待事件发生时，它们又会被唤醒从而结束休眠。
在被唤醒的过程中，首先需要能够找到这些进程，而这些等待的进程由一个称为等待队列的数据结构维护着。
等待队列就是一个进程链表，其中包含了所有等待某个特定事件的进程。
一个等待队列通过一个“等待队列头(wait_queue_head)" 的数据结构管理，它的类型被定义为
 wait_queue_head_t ,在 include/linux/wait.h 中可以找到：
 
 
静态初始化一个等待队列头使用下面的宏：
DECLARE_WAIT_QUEUE_HEAD (name);

static DECLARE_WAIT_QUEUE_HEAD(button_waitq);//申请了名为 button_waitq 的等待队列头

wait_event_interruptible(button_waitq, ev_press);// 在这把 队列头和进程联系，并当ev_press==0时，休眠进程

wake_up_interruptible(&button_waitq);   /* 唤醒休眠的进程 */

poll_wait(file, &button_waitq, wait); // 不会立即休眠


/**************20170602******************/
ps 查看进程  
kill -9 pid 强制结束进程  可以解决死锁
top  查看 进程占用资源
./first_test   &    在后台运行 first_test
linux 3类进程  1.交互进程 //由shell启动
			   2.监控进程，在后台运行，例如httpd Apache服务器监控进程
			   3.批处理进程，进程序列。
			   
			   
fasync//异步通知
1.应用程序注册 信号处理函数
2.驱动发
3发给 APP  要知道应用程序的pid  getpid()
4 用 kill_fasync发送


同步互斥阻塞
同一时刻只有一个APP打开驱动

--a; 1.读出2.修改3.写回 分三步//可以被其进程打断，导致操作错误，用原子操作解决

1. 原子操作
原子操作指的是在执行过程中不会被别的代码路径所中断的操作。
常用原子操作函数举例：
atomic_t v = ATOMIC_INIT(0);     //定义原子变量v并初始化为0
atomic_read(atomic_t *v);        //返回原子变量的值
void atomic_inc(atomic_t *v);    //原子变量增加1
void atomic_dec(atomic_t *v);    //原子变量减少1
int atomic_dec_and_test(atomic_t *v); //自减操作后测试其是否为0，为0则返回true，否则返回false。

2. 信号量
信号量（semaphore）是用于保护临界区的一种常用方法，只有得到信号量的进程才能执行临界区代码。
当获取不到信号量时，进程进入休眠等待状态。

定义信号量
struct semaphore sem;
初始化信号量
void sema_init (struct semaphore *sem, int val);
void init_MUTEX(struct semaphore *sem);//初始化为0

static DECLARE_MUTEX(button_lock);     //定义互斥锁

获得信号量
void down(struct semaphore * sem);
int down_interruptible(struct semaphore * sem); 
int down_trylock(struct semaphore * sem);
释放信号量
void up(struct semaphore * sem);

3. 阻塞
阻塞操作    
是指在执行设备操作时若不能获得资源则挂起进程，直到满足可操作的条件后再进行操作。
被挂起的进程进入休眠状态，被从调度器的运行队列移走，直到等待的条件被满足。

非阻塞操作  
进程在不能进行设备操作时并不挂起，它或者放弃，或者不停地查询，直至可以进行操作为止。

fd = open("...", O_RDWR | O_NONBLOCK); 

/********20170603***************/
mod_timer(&,jiffies+HZ/100)
jiffies  全局变量系统时钟   没10ms 产生一次重大  +1
HZ 100 
timeout 是jiffies+1 即过10ms 时间到



输入子系统 //通用驱动

major file_opration    register_chardev  init  exit 




测试

hexdump ./dev/event1 

2.没有启动QT
 cat /dev/tty1
 
 
 
 
 evdev.c    evdev_read
 
    input.c
-----------------------	
buttons.c     evdev.c
硬件            纯软件





struct input_id 在哪设置

猜测
设置输入事件   后
	/* 2.1 能产生哪类事件 */
	set_bit(EV_KEY, buttons_dev->evbit);
	set_bit(EV_REP, buttons_dev->evbit);
	
		/* 3. 注册 */
	input_register_device(buttons_dev);
	
	
	注册时，系统会根据 设置的事件分配特定的 input_id用于匹配特定的事件驱动handler（系统自带）
	
	
	
	
	
	
	/*******************20170607**********/
	char  short  int  long  float  double 在cpu上占多少字节 与cpu的操作位数无关
	和编译器有关   用sizeof() 查看
	分包为
	1      2      4    4     4      8
	
	
	platform 是一个虚拟的地址总线，相比 PCI、USB，它主要用于描述SOC上的片上资源。
	platform 所描述的资源有一个共同点：在CPU 的总线上直接取址。平台设备会分到一个
	名称（用在驱动绑定中）以及一系列诸如地址和中断请求号（IRQ）之类的资源。
	
	*实现硬件操作和硬件资源的分离，同一类型驱动 入 led_driver 可根据相同的驱动，更改不同的资源，控制
	不同的led.便于维护。
	
	platform_device 先于platform_driver 注册
	它 在 系统启动时的init.c的 s3c_arch_init()函数注册
	优先级高于 moudule_init 
	device 和 driver 的name 要相同  用于匹配
	匹配成功 调用 probe函数指针 
	probe要实现的功能 
	获取资源（在device注册时写入） ioremap  中断
	注册设备 。。。。。
	
	probe函数一般完成硬件设备使能，struct resource的获取以及虚拟地址的动态
	映射和具体类型设备的注册（因为平台设备只是一种虚拟的设备类型);remove
	函数完成硬件设备的关闭，struct resource以及虚拟地址的动态映射的释放和
	具体类型设备的注销。只要和内核本身运行依赖性不大的外围设备
	( 换句话说只要不在内核运行所需的一个最小系统之内的设备 ), 相对
	独立的拥有各自独自的资源 (addresses and IRQs) ，都可以用
	platform_driver 实现。
	如：lcd,usb,uart 等，都可以用platfrom_driver 写，而timer,irq等最小系统
	之内的设备则最好不用platfrom_driver 机制，实际上内核实现也是这样的。
	
	
	
	/****************20170617****************/
	vc6.0 连续用两次 scanf  输入  %f   第二次出错；
	
	/**************20170618******************/
	结构体成员引用
	箭头（->）：左边必须为指针；
	点号（.）：左边必须为实体。
	
	例如：
	class A
	{
	public
	play();
	}
	如果定义如下：
	A *p则：p->play()使用; 左边是结构指针。
	A p 则：p.paly()使用; 左边是结构变量。
	
	/****************20170627*******/
do{}  while()；  与 while(){}区别
do while 在循环结束时判断条件    循环必执行一次


/**********20170716***************/
笔记推送到github
C:\Program Files (x86)\STMicroelectronics\BlueNRG DK 2.0.2



/******************************20170827*******************/
bootloader跳转注意点，
关中断，deinit外设，（RCC时钟），* 用到systick，要关掉systick中断，一般的disableIRQ无法关闭系统终端systick，
如果未关systick中断，而APP使用到systick，则会产生错误，无法运行。


IDE烧写.bin.hex.elf 代码文件到 flash, 会根据 flash.ld 等flash分配文件进行烧写，
a: ori=0 len= 0x400
b: ori=0x400  len =0x400

c: ori=0xa00  lem=0x400

.bin大小0xe00,实际内容 大小0xc00

0x800-0xa00直接为空，填充0XFF，